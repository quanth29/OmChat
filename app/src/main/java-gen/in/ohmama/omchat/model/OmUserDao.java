package in.ohmama.omchat.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import in.ohmama.omchat.model.OmUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OM_USER".
*/
public class OmUserDao extends AbstractDao<OmUser, Long> {

    public static final String TABLENAME = "OM_USER";

    /**
     * Properties of entity OmUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property NickName = new Property(0, String.class, "nickName", false, "NICK_NAME");
        public final static Property Id = new Property(1, Long.class, "id", true, "ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
        public final static Property AvatorPath = new Property(4, String.class, "avatorPath", false, "AVATOR_PATH");
        public final static Property From = new Property(5, String.class, "from", false, "FROM");
        public final static Property Mood = new Property(6, String.class, "mood", false, "MOOD");
        public final static Property Size = new Property(7, Integer.class, "size", false, "SIZE");
        public final static Property TypeId = new Property(8, Integer.class, "typeId", false, "TYPE_ID");
    };


    public OmUserDao(DaoConfig config) {
        super(config);
    }
    
    public OmUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OM_USER\" (" + //
                "\"NICK_NAME\" TEXT," + // 0: nickName
                "\"ID\" INTEGER PRIMARY KEY ," + // 1: id
                "\"USER_NAME\" TEXT UNIQUE ," + // 2: userName
                "\"STATUS\" TEXT," + // 3: status
                "\"AVATOR_PATH\" TEXT," + // 4: avatorPath
                "\"FROM\" TEXT," + // 5: from
                "\"MOOD\" TEXT," + // 6: mood
                "\"SIZE\" INTEGER," + // 7: size
                "\"TYPE_ID\" INTEGER);"); // 8: typeId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OM_USER\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OmUser entity) {
        stmt.clearBindings();
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(1, nickName);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, status);
        }
 
        String avatorPath = entity.getAvatorPath();
        if (avatorPath != null) {
            stmt.bindString(5, avatorPath);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(6, from);
        }
 
        String mood = entity.getMood();
        if (mood != null) {
            stmt.bindString(7, mood);
        }
 
        Integer size = entity.getSize();
        if (size != null) {
            stmt.bindLong(8, size);
        }
 
        Integer typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindLong(9, typeId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public OmUser readEntity(Cursor cursor, int offset) {
        OmUser entity = new OmUser( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // nickName
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatorPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // from
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mood
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // size
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // typeId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OmUser entity, int offset) {
        entity.setNickName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatorPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFrom(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMood(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSize(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTypeId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OmUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OmUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
